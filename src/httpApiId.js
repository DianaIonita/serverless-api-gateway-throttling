'use strict';

const get = require('lodash.get');
const HTTP_API_ID_KEY = 'HttpApiIdForApigThrottling';

const getConfiguredHttpApiId = (serverless) => {
  return get(serverless, 'service.provider.httpApi.id')
}

const httpApiExists = async (serverless, settings) => {
  const configuredHttpApiId = getConfiguredHttpApiId(serverless);
  if (configuredHttpApiId) {
    return true;
  }

  if (serverless.service.provider.compiledCloudFormationTemplate) {
    const resource = serverless.service.provider.compiledCloudFormationTemplate.Resources['HttpApi'];
    if (resource) {
      return true;
    }
  }

  if (settings) {
    const httpApiIdFromAlreadyDeployedStack = await retrieveHttpApiId(serverless, settings);
    if (httpApiIdFromAlreadyDeployedStack) {
      return true;
    }
  }
  return false;
}

const outputHttpApiIdTo = (serverless) => {
  const configuredHttpApiId = getConfiguredHttpApiId(serverless);
  const autoGeneratedHttpApiId = { Ref: 'HttpApi' };

  serverless.service.provider.compiledCloudFormationTemplate.Outputs[HTTP_API_ID_KEY] = {
    Description: 'HTTP API ID',
    Value: configuredHttpApiId || autoGeneratedHttpApiId,
  };
};

const getAlreadyDeployedStack = async (serverless, settings) => {
  const stackName = serverless.providers.aws.naming.getStackName(settings.stage);
  try {
    const stack = await serverless.providers.aws.request('CloudFormation', 'describeStacks', { StackName: stackName },
      settings.stage,
      settings.region
    );
    return stack;
  }
  catch (error) {
    serverless.cli.log(`[serverless-api-gateway-throttling] Could not retrieve stack because: ${error.message}.`);
    return;
  }
}

const retrieveHttpApiId = async (serverless, settings) => {
  const configuredHttpApiId = getConfiguredHttpApiId(serverless);
  if (configuredHttpApiId) {
    return configuredHttpApiId;
  }

  const stack = await getAlreadyDeployedStack(serverless, settings);
  const outputs = stack.Stacks[0].Outputs;
  const restApiKey = outputs.find(({ OutputKey }) => OutputKey === HTTP_API_ID_KEY)
  if (restApiKey) {
    return restApiKey.OutputValue;
  }
  else {
    serverless.cli.log(`[serverless-api-gateway-throttling] Could not find stack output variable named ${HTTP_API_ID_KEY}.`);
  }
};

module.exports = {
  httpApiExists,
  outputHttpApiIdTo,
  retrieveHttpApiId
};
